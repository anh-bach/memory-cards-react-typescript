{"version":3,"sources":["components/Card.tsx","App.tsx","index.tsx"],"names":["Card","card","handleChoice","flipped","disabled","className","src","alt","onClick","cardsInit","matched","App","useState","cards","setCards","turns","setTurns","choiceOne","setChoiceOne","choiceTwo","setChoiceTwo","setDisabled","shuffleCards","shuffledCards","sort","Math","random","map","id","resetTurn","prevTurns","useEffect","prevCards","setTimeout","ReactDOM","render","document","getElementById"],"mappings":"8PAiCeA,EAtBa,SAAC,GAA+C,IAA7CC,EAA4C,EAA5CA,KAAMC,EAAsC,EAAtCA,aAAcC,EAAwB,EAAxBA,QAASC,EAAe,EAAfA,SAO1D,OACE,qBAAKC,UAAU,OAAf,SACE,sBAAKA,UAAWF,EAAU,UAAY,GAAtC,UACE,qBAAKG,IAAKL,EAAKK,IAAKC,IAAI,aAAaF,UAAU,UAC/C,qBACEC,IAAI,iBACJC,IAAI,YACJF,UAAU,OACVG,QAdgB,WACjBJ,GACHF,EAAaD,YCRbQ,EAAwB,CAC5B,CAAEH,IAAK,oBAAqBI,SAAS,GACrC,CAAEJ,IAAK,oBAAqBI,SAAS,GACrC,CAAEJ,IAAK,kBAAmBI,SAAS,GACnC,CAAEJ,IAAK,oBAAqBI,SAAS,GACrC,CAAEJ,IAAK,oBAAqBI,SAAS,GACrC,CAAEJ,IAAK,mBAAoBI,SAAS,IAgFvBC,EA7EC,WACd,MAA0BC,mBAAqB,IAA/C,mBAAOC,EAAP,KAAcC,EAAd,KACA,EAA0BF,mBAAiB,GAA3C,mBAAOG,EAAP,KAAcC,EAAd,KACA,EAAkCJ,mBAA0B,MAA5D,mBAAOK,EAAP,KAAkBC,EAAlB,KACA,EAAkCN,mBAA0B,MAA5D,mBAAOO,EAAP,KAAkBC,EAAlB,KACA,EAAgCR,oBAAS,GAAzC,mBAAOR,EAAP,KAAiBiB,EAAjB,KAGMC,EAAe,WACnB,IAAMC,EAA4B,UAAId,EAAcA,GACjDe,MAAK,kBAAMC,KAAKC,SAAW,MAC3BC,KAAI,SAAC1B,GAAD,mBAAC,eAAeA,GAAhB,IAAsB2B,GAAIH,KAAKC,cAEtCR,EAAa,MACbE,EAAa,MACbN,EAASS,GACTP,EAAS,IAILd,EAAe,SAACD,GACpBgB,EAAYG,EAAanB,GAAQiB,EAAajB,IAI1C4B,EAAY,WAChBX,EAAa,MACbE,EAAa,MACbJ,GAAS,SAACc,GAAD,OAAeA,EAAY,KACpCT,GAAY,IA4Bd,OAxBAU,qBAAU,WACJd,GAAaE,IACfE,GAAY,GACRJ,EAAUX,MAAQa,EAAUb,KAC9BQ,GAAS,SAACkB,GACR,OAAOA,EAAUL,KAAI,SAAC1B,GAIpB,OAHIA,EAAKK,MAAQW,EAAUX,MACzBL,EAAKS,SAAU,GAEVT,QAGX4B,KAEAI,YAAW,kBAAMJ,MAAa,QAGjC,CAACZ,EAAWE,IAGfY,qBAAU,WACRT,MACC,IAGD,sBAAKjB,UAAU,MAAf,UACE,6CACA,wBAAQG,QAASc,EAAjB,sBACA,qBAAKjB,UAAU,YAAf,SACGQ,EAAMc,KAAI,SAAC1B,GAAD,OACT,cAAC,EAAD,CAEEA,KAAMA,EACNC,aAAcA,EACdC,QAASF,IAASgB,GAAahB,IAASkB,GAAalB,EAAKS,QAC1DN,SAAUA,GAJLH,EAAK2B,SAQhB,wCAAWb,SClFjBmB,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.60e08d82.chunk.js","sourcesContent":["import React, { FC } from 'react';\r\nimport { CardType } from '../App';\r\nimport './Card.css';\r\n\r\ntype CardProps = {\r\n  card: CardType;\r\n  flipped: boolean;\r\n  disabled: boolean;\r\n  handleChoice: (card: CardType) => void;\r\n};\r\n\r\nconst Card: FC<CardProps> = ({ card, handleChoice, flipped, disabled }) => {\r\n  const handleCardClick = () => {\r\n    if (!disabled) {\r\n      handleChoice(card);\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div className='card'>\r\n      <div className={flipped ? 'flipped' : ''}>\r\n        <img src={card.src} alt='card front' className='front' />\r\n        <img\r\n          src='/img/cover.png'\r\n          alt='card back'\r\n          className='back'\r\n          onClick={handleCardClick}\r\n        />\r\n      </div>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default Card;\r\n","import { FC, useState, useEffect } from 'react';\nimport './App.css';\nimport Card from './components/Card';\n\nexport type CardType = { id?: number; src: string; matched: boolean };\n\nconst cardsInit: CardType[] = [\n  { src: '/img/helmet-1.png', matched: false },\n  { src: '/img/potion-1.png', matched: false },\n  { src: '/img/ring-1.png', matched: false },\n  { src: '/img/scroll-1.png', matched: false },\n  { src: '/img/shield-1.png', matched: false },\n  { src: '/img/sword-1.png', matched: false },\n];\n\nconst App: FC = () => {\n  const [cards, setCards] = useState<CardType[]>([]);\n  const [turns, setTurns] = useState<number>(0);\n  const [choiceOne, setChoiceOne] = useState<CardType | null>(null);\n  const [choiceTwo, setChoiceTwo] = useState<CardType | null>(null);\n  const [disabled, setDisabled] = useState(false);\n\n  //shuffle cards\n  const shuffleCards = (): void => {\n    const shuffledCards: CardType[] = [...cardsInit, ...cardsInit]\n      .sort(() => Math.random() - 0.5)\n      .map((card) => ({ ...card, id: Math.random() }));\n\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setCards(shuffledCards);\n    setTurns(0);\n  };\n\n  //handle choice\n  const handleChoice = (card: CardType): void => {\n    choiceOne ? setChoiceTwo(card) : setChoiceOne(card);\n  };\n\n  //reset choices and increase turns\n  const resetTurn = (): void => {\n    setChoiceOne(null);\n    setChoiceTwo(null);\n    setTurns((prevTurns) => prevTurns + 1);\n    setDisabled(false);\n  };\n\n  //compare two selected cards\n  useEffect(() => {\n    if (choiceOne && choiceTwo) {\n      setDisabled(true);\n      if (choiceOne.src === choiceTwo.src) {\n        setCards((prevCards) => {\n          return prevCards.map((card) => {\n            if (card.src === choiceOne.src) {\n              card.matched = true;\n            }\n            return card;\n          });\n        });\n        resetTurn();\n      } else {\n        setTimeout(() => resetTurn(), 1000);\n      }\n    }\n  }, [choiceOne, choiceTwo]);\n\n  //Start the game automatically\n  useEffect(() => {\n    shuffleCards();\n  }, []);\n\n  return (\n    <div className='App'>\n      <h1>Magic Match</h1>\n      <button onClick={shuffleCards}>New Game</button>\n      <div className='card-grid'>\n        {cards.map((card) => (\n          <Card\n            key={card.id}\n            card={card}\n            handleChoice={handleChoice}\n            flipped={card === choiceOne || card === choiceTwo || card.matched}\n            disabled={disabled}\n          />\n        ))}\n      </div>\n      <p>Turns: {turns}</p>\n    </div>\n  );\n};\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}